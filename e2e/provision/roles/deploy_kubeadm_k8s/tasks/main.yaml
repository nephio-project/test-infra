- name: "Including vars/kubeadm.yaml variables"
  ansible.builtin.include_vars: "{{ playbook_dir }}/vars/kubeadm.yaml"
  any_errors_fatal: true

- name: wget containerd and unarchive to /usr/local
  become: true
  ansible.builtin.unarchive:
    src: https://github.com/containerd/containerd/releases/download/v{{containerd_ver}}/containerd-{{containerd_ver}}-linux-amd64.tar.gz
    dest: /usr/local/
    remote_src: yes

- name: copy remote container.service file to /usr/lib/systemd/system/
  become: true
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    dest: /usr/lib/systemd/system/

- name: Apply new SELinux file context to filesystem on {{ ansible_os_family }} system
  ansible.builtin.command: restorecon -Rv /usr/lib/systemd/system/
  when: ansible_os_family == "RedHat"

- name: Just force systemd to reread configs
  become: true
  ansible.builtin.systemd:
    daemon_reload: true

- name: Enable and start containerd
  become: true
  ansible.builtin.systemd:
    name: containerd.service
    state: started
    enabled: true

- name: copy remote runc.amd64 file to /usr/local/sbin/runc
  become: true
  ansible.builtin.get_url:
    url: https://github.com/opencontainers/runc/releases/download/v{{runc_ver}}/runc.amd64
    dest: /usr/local/sbin/runc
    mode: '0755'

- name: generated containerd config.toml file
  become: true
  block:
    - name: created directory /etc/containerd
      ansible.builtin.file:
        state: directory
        path: /etc/containerd
    - name: generate the default config.toml file
      ansible.builtin.shell: containerd config default | sudo tee /etc/containerd/config.toml
    - name: set SystemdCgroup to be 'true'
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
    - name: enable CRI plugins by commenting out disabled_plugins = ["cri"]
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: '^disabled_plugins ='
        replace: '#disabled_plugins ='

- name: copy cni plugins tar and extract to /opt/cni/bin
  become: true
  block:
    - name: create directory /opt/cni/bin
      ansible.builtin.file:
        state: directory
        path: /opt/cni/bin
    - name: get, extract and copy plugins
      ansible.builtin.unarchive:
        src: https://github.com/containernetworking/plugins/releases/download/v{{cni_plugins_ver}}/cni-plugins-linux-amd64-v{{cni_plugins_ver}}.tgz
        dest: /opt/cni/bin
        remote_src: yes

- name: reload containerd.service
  become: true
  ansible.builtin.systemd:
    name: containerd.service
    state: restarted

- name: install kubelet kubeadm kubectl on {{ ansible_os_family }} system
  ansible.builtin.include_tasks: kubeadm-{{ ansible_os_family }}.yaml

- name: create 0-containerd.conf file
  become: true
  block:
    - name: ensure directory exists
      ansible.builtin.file:
        path: /etc/systemd/system/kubelet.service.d
        state: directory
    - name: create 0-containerd.conf file
      copy:
        dest: /etc/systemd/system/kubelet.service.d/0-containerd.conf
        content: |
          [Service]
          Environment="KUBELET_EXTRA_ARGS=--runtime-request-timeout=15m --fail-swap-on=false --container-runtime-endpoint=unix:///run/containerd/containerd.sock"

- name: set net.ipv4.ip_forward to 1
  become: true
  block:
    - name: create file /etc/sysctl.d/10-ip-forwarding.conf
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_file: /etc/sysctl.d/10-ip-forwarding.conf
    - name: Set ip forwarding on in /proc and in the sysctl file and reload if necessary
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        state: present
        reload: true

- name: add the br_netfilter module and make sure it is loaded after reboots
  become: true
  block:
    - name: add the br_netfilter module
      community.general.modprobe:
        name: br_netfilter
        state: present
        persistent: present

    - name: systemctl daemon-relaod
      ansible.builtin.systemd:
        daemon_reload: true

- name: configure crictl to use the containerd.sock
  become: true
  ansible.builtin.shell: crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock

- name: check if kubeadm init has already been invoked by checking for kubeadm tokens
  become: true
  ansible.builtin.shell: kubeadm token list
  register: token
  ignore_errors: true

- name: invoke kubeadm init
  become: true
  ansible.builtin.shell: kubeadm init --pod-network-cidr={{pod_network_cidr}} --control-plane-endpoint=$(hostname -i | xargs -n1 | grep ^{{ctrlplane_ep_ip_filter}})
  when: token.stderr_lines != []

- name: create .kube directory
  ansible.builtin.file:
    state: directory
    path: $HOME/.kube

- name: copy kubeconfig file
  become: true
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/{{ ansible_user_id }}/.kube/config
    remote_src: yes

- name: change file ownership for kubeconfig
  become: true
  ansible.builtin.shell: chown $(id -u {{ ansible_user_id }} ):$(id -g {{ ansible_user_id }} ) /home/{{ ansible_user_id }}/.kube/config

- name: apply the network plugin
  ansible.builtin.shell: kubectl apply -f {{ network_plugin_url }}

- name: apply multus plugin
  ansible.builtin.shell: kubectl apply --filename="https://raw.githubusercontent.com/k8snetworkplumbingwg/multus-cni/v{{multus_ver}}/deployments/multus-daemonset-thick-plugin.yml"
  when: multus_ver is defined

- name: apply local-path-storage plugin
  ansible.builtin.shell: kubectl apply --filename="https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.27/deploy/local-path-storage.yaml"

- name: set default storage class
  ansible.builtin.shell: kubectl patch storageclass local-path -p '{"metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

- name: remove the NoSchedule taint on master node
  ansible.builtin.shell: kubectl taint node $(hostname) node-role.kubernetes.io/control-plane-
